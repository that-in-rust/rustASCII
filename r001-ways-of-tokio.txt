"Hey, remember when you had to manually start your car vs having a push-button start? 
That's like the difference between manual runtime setup and #[tokio::main]!"

There are 3 main ways to run async code in Tokio:

1️⃣ Using #[tokio::main] (Most Idiomatic)
┌─────────────────────────────────┐
│ #[tokio::main]                  │
│ async fn main() {               │
│     // Your async code here     │ ◄── Most ergonomic
│ }                               │     Least boilerplate
└─────────────────────────────────┘

2️⃣ Manual Runtime Setup (More Control) 
┌─────────────────────────────────┐
│ fn main() {                     │
│     let rt = Runtime::new()?;   │ ◄── Full control over runtime
│     rt.block_on(async {         │     More verbose
│         // Your async code      │     Good for custom configs
│     })                          │
│ }                               │
└─────────────────────────────────┘

3️⃣ Using Existing Runtime (For Libraries)
┌─────────────────────────────────┐
│ fn my_library_function() {      │
│     Handle::current().spawn(    │ ◄── Best for libraries
│         async {                 │     Assumes runtime exists
│             // Async code       │     Most flexible
│         }                       │
│     );                         │
│ }                              │
└─────────────────────────────────┘

Trade-offs Table:
┌────────────────┬───────────┬──────────┬───────────┬──────────────┐
│ Approach       │ Ergonomic │ Control  │ Overhead  │ Use Case     │
├────────────────┼───────────┼──────────┼───────────┼──────────────┤
│ #[tokio::main] │   ⭐⭐⭐  │   ⭐     │    ⭐⭐   │ Applications │
│ Manual Runtime │   ⭐      │  ⭐⭐⭐  │    ⭐⭐⭐ │ Custom Needs │
│ Existing RT    │   ⭐⭐   │  ⭐⭐    │    ⭐     │ Libraries    │
└────────────────┴───────────┴──────────┴───────────┴──────────────┘

Memory Layout of Runtime:
┌─────────────────┐
│ Tokio Runtime   │
├─────────────────┤
│ Thread Pool     │──► Worker Threads
│ Task Scheduler  │──► Manages async tasks
│ IO Driver       │──► System IO events
└─────────────────┘

Example with println!s to understand flow:

"Think of async tasks like juggling balls - you can toss them up (spawn), catch them (await), 
or keep them moving (block_on)!"

4️⃣ Different Ways to Run Async Tasks:

a) Blocking (Like waiting for coffee to brew)
┌─────────────────────────────────┐
│ // Blocks current thread        │
│ rt.block_on(async {            │ ◄── Waits for completion
│     println!("☕ Brewing...");  │     Simple but blocks thread
│     make_coffee().await;       │
│     println!("☕ Done!");      │
│ });                            │
└─────────────────────────────────┘

b) Spawning (Like ordering takeout)
┌─────────────────────────────────┐
│ // Runs in background          │
│ tokio::spawn(async {           │ ◄── Fire and forget
│     println!("🚗 Ordered");    │     Non-blocking
│     deliver_food().await;      │     Returns JoinHandle
│     println!("🍕 Delivered!"); │
│ });                            │
└─────────────────────────────────┘

c) Spawn + Join (Like tracking package)
┌─────────────────────────────────┐
│ // Spawn and wait later        │
│ let handle = tokio::spawn(     │ ◄── Get handle
│     async {                    │     Can await later
│         println!("📦 Sent");   │     
│         process().await        │
│     }                         │
│ );                            │
│ // Do other stuff...          │
│ handle.await?; // Wait here   │
└─────────────────────────────────┘

d) Sync vs Async (Like texting vs calling)
┌─────────────────────────────────┐
│ // Synchronous - blocks        │
│ let result = blocking_call();  │ ◄── One at a time
│                               │     Ties up thread
│ // Asynchronous - yields      │
│ let result = async_call().await;│ ◄── Multitask
│                               │     Efficient
└─────────────────────────────────┘

Task States:
┌──────────┐     ┌──────────┐     ┌──────────┐
│ Spawned  │ ──► │ Running  │ ──► │ Complete │
└──────────┘     └──────────┘     └──────────┘
     ▲                │                 │
     └────────────────┘                 │
        (Yield/Wake)                    │
           ▲                            │
           └────────────────────────────┘
              (Notification)


When to Use Tokio Patterns:
                  Need Async?
                      │
           ┌─────────┴──────────┐
           │                    │
          Yes                   No
           │              (Use regular code)
           │
    Need Runtime Setup?
           │
    ┌──────┴───────┐
    │              │
   Yes             No
    │         (Use existing runtime)
#[tokio::main]
    │
What Task Pattern?
    │
    ├─────────────┬─────────────┐
    │             │             │
Single Task  Fire&Forget  Need Results
    │       tokio::spawn  tokio::spawn
    │                    with .await
Run Directly
    
Final Decision Tree:
┌─────────────────────────────────┐
│ #[tokio::main]                 │
│ - Sets up runtime              │
│ - Can run any task pattern:    │
│   • Direct async/await         │
│   • tokio::spawn               │
│   • tokio::spawn + .await      │
│ - Entry point for async code   │
│                               │
│ Direct async/await            │
│ - Simple sequential tasks     │
│ - Clear execution flow        │
│ - Blocking at .await points   │
│                               │
│ tokio::spawn                  │
│ - Fire & forget tasks         │
│ - Background processing       │
│ - Non-blocking execution      │
│                               │
│ tokio::spawn + .await         │
│ - Parallel task execution     │
│ - Need return values          │
│ - Coordinated completion      │
└─────────────────────────────────┘
Most Idiomatic Approach:
┌─────────────────────────────────┐
│ Always Use #[tokio::main]       │
│                                 │
│ Reasons:                        │
│ ✓ Future-proof flexibility      │
│ ✓ Consistent runtime setup      │
│ ✓ No runtime setup boilerplate  │
│ ✓ Can mix any task pattern      │
│ ✓ Zero runtime overhead         │
│                                 │
│ Exception:                      │
│ × Library crates               │
│   (Let application control      │
│    runtime setup)               │
└─────────────────────────────────┘

Example:
#[tokio::main]
async fn main() {
    // Can freely mix patterns:
    
    // Direct async/await
    let result = some_async_fn().await;
    
    // Fire & forget
    tokio::spawn(background_task());
    
    // Parallel with results
    let handle = tokio::spawn(async { 
        compute_value().await 
    });
    let value = handle.await.unwrap();
}

// 💡 Key Insight:
// Using #[tokio::main] doesn't force any
// specific task pattern - it gives you
// the freedom to choose the right pattern
// for each specific use case
